// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/main.tmpl
// schema.go
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x51\x5d\x6b\xdb\x30\x14\x7d\xb6\x7e\xc5\x99\xe9\xa8\x5d\x52\xa5\xed\xdb\x06\x79\x28\x6d\x06\x19\x5b\x3b\x48\x61\x0f\x5d\x29\x8a\x7d\x9d\x88\x3a\x92\x77\xa5\x94\x05\xa1\xff\x3e\x24\x27\x61\x7b\xb2\xa5\x73\xee\xf9\xd0\x0d\x61\x7a\x21\xee\xec\xb0\x67\xbd\xde\x78\xdc\x5c\x5d\x7f\xba\x1c\x98\x1c\x19\x8f\x2f\xaa\xa1\x95\xb5\x6f\x58\x98\x46\xe2\xb6\xef\x91\x49\x0e\x09\xe7\x77\x6a\xa5\x78\xda\x68\x07\x67\x77\xdc\x10\x1a\xdb\x12\xb4\x43\xaf\x1b\x32\x8e\x5a\xec\x4c\x4b\x0c\xbf\x21\xdc\x0e\xaa\xd9\x10\x6e\xe4\xd5\x11\x45\x67\x77\xa6\x15\xda\x64\xfc\xdb\xe2\x6e\xfe\xb0\x9c\xa3\xd3\x3d\xe1\x70\xc7\xd6\x7a\xb4\x9a\xa9\xf1\x96\xf7\xb0\x1d\xfc\x3f\x66\x9e\x89\xa4\xb8\x98\xc6\x28\x44\x08\x68\xa9\xd3\x86\x50\x6e\x95\x36\x25\x62\x14\xd3\x29\xee\x52\x9e\x35\x19\x62\xe5\xa9\xc5\x6a\x8f\x73\x32\xbe\x39\x5d\x9d\x4b\xdc\x3f\xe2\xe1\xf1\x09\xf3\xfb\xc5\x93\x14\x83\x6a\xde\xd4\x9a\x90\x34\x84\xd0\xdb\xc1\xb2\x47\x25\x8a\xd2\xba\x52\x14\xe5\x6a\xef\x29\xfd\x84\x00\x4f\xdb\xa1\x57\x9e\x50\x8e\x2c\x97\x2d\x33\x34\xb0\x36\xbe\x43\xf9\xf1\x77\x09\xf9\xe3\xa0\x18\xa3\xa8\x73\xcc\xb3\x95\x72\x84\xcf\x33\xe4\xef\x11\x4f\xb3\xef\x8a\xe1\x9a\x0d\x6d\x95\xc3\x0c\xcf\x2f\x64\xbc\x5c\x18\x4f\xdc\xa9\x86\x42\x96\x66\x65\xd6\x84\xb3\xd7\x09\xce\x8c\xda\x66\x19\xf9\xa0\xb6\xe4\x92\x7e\x51\x84\x70\x79\xd0\x8f\x51\xa6\xc3\x29\x8a\x0b\xb1\x3c\xcc\xc4\x38\xc9\x5a\x64\x5a\x5c\xc6\x28\xa2\x10\xdd\xce\x34\xb9\x73\x55\x23\x88\x22\x05\xe9\xb5\x21\x87\xe7\x97\xe7\x97\x54\x5a\x14\x9d\x65\xbc\x4e\x0e\xf9\x92\xef\x18\xe5\x98\x37\x88\xa2\x58\x4d\x40\xcc\x09\xfb\xae\xd8\x6d\x54\xbf\xcc\x60\x35\x72\x6a\x51\x14\xba\xcb\x8c\x0f\x33\x18\xdd\xe7\x99\xa2\x53\xba\xaf\x88\x39\xc1\xa9\xc2\xe8\x3b\x83\x1a\x06\x32\x6d\x95\x8f\x13\xac\x6a\x91\x50\xeb\xe4\xd2\xb7\x76\xe7\xe5\x4f\xd6\x9e\xaa\xbc\x0f\xf9\xd5\x6a\x73\x24\x8e\x71\xab\xf2\x97\x29\xeb\xba\x3e\x75\x3b\xba\x24\x7b\xcb\xb9\xe4\xa8\x45\xcc\xa3\xd6\xd2\xb3\x36\xeb\xc4\x91\xf3\xc4\xa9\xea\x3a\x73\xe6\x7f\xb4\xaf\xae\xb3\xd2\x7f\x5b\x1f\x4b\x8d\x4b\x3f\x3c\x66\x8c\xe2\x6f\x00\x00\x00\xff\xff\xe4\x6e\x0c\x4d\x4b\x03\x00\x00")

func templateMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateMainTmpl,
		"template/main.tmpl",
	)
}

func templateMainTmpl() (*asset, error) {
	bytes, err := templateMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/main.tmpl", size: 843, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5f\x6f\xdb\x38\x12\x7f\x96\x3e\xc5\xd4\x40\x03\xa9\xf0\xca\xbd\xc5\xe1\x80\x53\xe1\x87\x45\x37\x0b\xe4\xf6\x9a\x2e\xb6\xb9\x7b\x29\x8a\xae\x2c\x0d\x6d\xb6\x12\xe5\x92\xb4\x9b\x6c\x90\xef\x7e\x98\x21\xa9\x3f\x96\xed\x6e\xdb\x4b\x5e\x22\x0e\x67\x86\x33\xbf\xf9\x47\x7a\xb1\x80\x97\xed\xf6\x4e\xcb\xf5\xc6\xc2\x8f\xcf\xff\xf6\xcf\x1f\xb6\x1a\x0d\x2a\x0b\xbf\x14\x25\xae\xda\xf6\x23\x5c\xa9\x32\x83\x9f\xea\x1a\x98\xc9\x00\xed\xeb\x3d\x56\x59\xbc\x58\xc0\xcd\x46\x1a\x30\xed\x4e\x97\x08\x65\x5b\x21\x48\x03\xb5\x2c\x51\x19\xac\x60\xa7\x2a\xd4\x60\x37\x08\x3f\x6d\x8b\x72\x83\xf0\x63\xf6\x3c\xec\x82\x68\x77\xaa\x22\x15\x52\x31\xcb\xbf\xaf\x5e\x5e\x5e\xbf\xb9\x04\x21\x6b\x0c\x34\xdd\xb6\x16\x2a\xa9\xb1\xb4\xad\xbe\x83\x56\x80\x1d\x9c\x67\x35\x62\x16\xc7\xdb\xa2\xfc\x58\xac\x11\xea\xb6\xa8\xe2\x58\x36\xdb\x56\x5b\x48\xe2\x68\x86\xaa\x6c\x2b\xa9\xd6\x8b\x0f\xa6\x55\xb3\x38\x9a\x89\xc6\xd2\x3f\x8d\xa2\xc6\xd2\xce\xe2\x38\x9a\xad\xa5\xdd\xec\x56\x59\xd9\x36\x0b\xe1\x1d\x96\xaa\xdc\xad\x0a\xdb\xea\x05\x2a\xe6\xff\x12\xcf\xc2\x94\x1b\x6c\x8a\x05\x56\x6b\xfc\x1a\x7e\x21\xb1\xae\x66\x71\x1a\x13\x0a\x6f\x98\x06\x1a\x3d\xfe\x06\x0a\x05\xa8\x6c\xe6\x37\xec\xa6\xb0\xf0\xb9\x30\xec\x26\x56\x20\x74\xdb\x40\x01\x65\xdb\x6c\x6b\x49\x58\x1b\xd4\xe0\xa1\xc8\x62\x7b\xb7\xc5\xa0\xd2\x58\xbd\x2b\x2d\xdc\xc7\xd1\x75\xd1\x20\x00\x10\x45\xaa\x35\x7d\xc1\x1f\x84\x4d\x3e\x53\x45\x83\xf3\xb6\x91\x16\x9b\xad\xbd\x9b\xfd\x11\x47\x2f\x5b\x25\xe4\x1a\xd8\x04\xff\xed\x79\x4b\x5e\x8d\xb9\x2f\xab\x35\x1a\x00\x78\xfb\xee\x19\x7d\x0e\x34\x13\x28\x66\xcc\xfc\x0b\xf9\x6d\x98\x99\x3f\x7b\x66\x46\xe4\x80\xfb\x4a\x55\x78\x8b\x86\xb8\xf9\xb3\xe7\x96\x6e\x67\xc4\xfe\xc0\x60\xfe\xd6\x1a\x69\x65\xab\xa0\x42\x53\x6a\xb9\x42\x03\x05\xb0\x72\xd8\x86\x2d\x9f\x62\x2e\x16\x1e\xb1\x4e\xae\xc7\x2c\x9c\x09\x00\x52\x59\x80\xc5\xc2\x2b\xe2\xd3\x83\x16\x47\xaa\xa5\xb1\x59\x1c\xbd\x92\xb7\x58\x5d\x29\x12\x59\xb5\x6d\x0d\x9c\xe3\x95\x2c\x0b\x8b\x06\xa4\x18\x08\x50\x3c\x1b\xe2\xfe\x41\x2a\x27\x28\xd5\x95\xd7\xeb\xce\x6a\x88\x34\x3e\xcb\x91\xdc\x59\xce\x5d\x87\xe2\x34\x75\x1c\xfd\x1b\x32\xc7\x09\x4e\x13\xc7\xfd\x0d\xd2\xe7\x7c\x0e\x5d\x29\xd1\xf6\x6c\xcf\xd8\xe7\xec\xe6\x6e\x8b\xbc\xe1\xc5\xe8\xc0\xb1\xd8\x4d\x31\x50\x7e\xea\x34\x5b\x1c\xa4\xe0\x1b\xf9\xe7\xc0\xc6\x67\x52\xd9\x7f\xfc\x7d\x22\x65\xe4\x9f\x07\x87\x5d\xaa\x5d\x63\x3a\xb6\xb7\xef\xc6\xc7\x85\x24\x26\xa6\xa9\xdc\xcf\x28\x8a\x5d\x6d\x21\x3a\x61\x23\x89\xbd\xaf\x1c\xd3\x58\xfa\x3f\x4a\x7e\xda\x75\xe6\x72\x96\xc0\x44\x7c\xc7\x4c\x63\xc1\x6b\x59\xd7\xc5\xaa\xc6\xb3\x82\xca\x33\x8d\x45\x5f\x6f\x29\xb5\x8b\xfa\xac\x68\xeb\x99\xc6\xa2\xc1\xd1\xb3\xa2\xc7\x1d\xdd\x56\x85\xc5\x20\x7f\xca\x51\x66\x3a\x8e\xd4\x55\xd3\xec\x6c\xe7\xf1\x09\x05\x32\x30\x8d\x65\xff\x5b\xd4\xb2\xa2\xae\xcb\x01\xe6\x92\x9a\xca\xee\x3b\xa6\x83\x7c\xb2\xad\x2e\xd6\xf8\x2b\xde\x9d\xc9\x42\xe3\x98\xde\x7f\xc4\xbb\xb1\x74\xd7\x49\x5c\x36\x8e\x97\x41\x3a\xf4\xa2\x83\x83\x51\x11\x79\x7f\xd6\x63\x13\x98\x8e\x74\x3f\xee\xc0\xd3\x6e\xc0\xe4\x6f\x68\x06\x2c\x77\xa4\x17\x78\x48\x4e\x56\x3f\x15\xfa\x11\xc6\x33\xf5\x7e\xc0\x78\x58\xe1\xbf\xa3\x70\x87\x8f\xf9\x34\x8a\xf7\xd3\xd3\x7f\x47\xe1\xb1\x77\x03\xa9\x67\x3e\x51\x89\x1e\xe8\x33\xb5\x77\xa5\xf6\xa8\x0d\x1e\xb2\x4a\x47\x3e\x3c\xfe\xd3\x4e\x6a\xac\x0e\x78\xb5\x27\x1f\x89\x9a\xeb\xfb\xd3\xb0\x39\xfa\x37\xc4\xcd\x09\xf6\x81\xf3\x9e\x76\x09\x75\xc6\x53\x3f\xce\xbb\x6e\xf8\xc5\x59\x7e\xc8\x79\x64\x90\x3b\x2f\xaf\xf1\x33\xc7\xa3\xd4\xc8\xe3\xb0\x50\xc1\x23\x52\xee\xdc\xe2\x2f\x37\xb9\xb7\xb6\xd5\x59\x2c\x76\xaa\x0c\x92\x09\x56\xf0\x8c\x38\xb2\x9f\x3b\x8e\xd4\x07\xf9\x3e\x8e\x14\x42\xbe\x84\x0b\x5a\xde\xc7\x11\xa5\x56\xee\xd2\x00\xab\xec\xa6\x58\xcf\x89\x76\xb7\xc5\xbc\xa3\x51\x36\xc6\x11\x67\x75\x47\xa4\x05\x11\x1d\x62\xb9\x23\xba\x05\x91\x7d\x1e\xe4\x4c\xf6\x0b\xa2\x87\x98\xe7\x44\x0f\x0b\xb7\x21\xbc\x7e\xde\x10\x5e\xff\x43\x1c\x49\x01\x1a\x05\x99\xec\x76\x5e\xf0\xf2\xc9\x12\x94\xac\xc9\x9d\x48\x21\x91\x61\xd9\xb9\xaf\x51\xa4\x2c\xaa\xd1\xee\xb4\x02\x85\x3d\xb2\x6e\x6c\x4f\xa1\x75\x97\x8d\xf3\xd8\xb2\x6c\x22\xaa\x30\xa6\x87\xe8\x26\xee\x9e\x36\x07\xd4\x9a\xd6\xf7\x71\x64\xd8\xe8\x0b\xa6\xdf\x8f\xf0\xe3\x3f\xd1\x83\x48\xb3\x7e\xbc\x43\x94\xf9\x28\x38\x61\xc7\x47\x88\x67\x72\x3e\xdc\x60\xca\x38\x24\x61\xab\x8f\x4b\x98\x8d\x79\x6f\x43\x18\x84\x71\xd4\x8d\xbf\x7e\x37\x50\xd8\xca\x30\x41\xf2\xce\xca\x6e\xa6\xc4\xd1\x60\x18\xe4\x7e\xbb\xa7\xd0\x7e\x3f\x69\x78\xbf\x46\x95\x88\x2a\xeb\xa9\x29\x31\xf9\x29\x98\xf7\xb6\x87\xb9\xe8\x02\xce\xfe\x0d\xe7\x65\xce\xfe\x8d\x26\x68\xcf\xd9\x8d\x89\xce\xe2\x8e\xd2\xe5\x96\x11\x0c\x36\x2c\xfb\x84\x0a\x69\x23\xeb\x39\x88\xc6\x66\x97\x14\x52\x91\xcc\x1a\x69\x0c\x15\x30\xb7\x0e\x49\x42\xa2\xd5\x3e\x73\x9e\x7e\x9a\xcd\x49\x17\x85\x34\xed\x74\xd3\x7d\x2b\x5f\x02\x5f\xb4\xc8\x5b\xba\x80\xa5\x2f\x1c\xfd\xc9\x12\x9e\xf3\x71\x46\x30\x1d\x96\x70\x41\x1b\x03\xc3\xdc\xc5\xcb\xa7\xfa\xc5\xc5\x14\x0e\x96\x97\x02\xf6\x73\x68\x3f\xd2\x49\x3d\x47\x96\xb8\x76\x93\xbe\xa0\x2d\xe2\x8b\xbc\xc6\xa0\x62\x09\xfb\x38\x8a\x1e\x00\x6b\x83\x8e\xe1\x94\xe3\xfe\xd6\x01\xfb\xa2\xde\x21\x3b\x4d\xd7\xb6\xce\x73\x7a\xd0\xaa\xd6\x42\xe1\xa7\xce\x08\x09\xf2\xa6\x2f\x45\x23\xe6\xa4\xde\xd7\xe3\xab\x42\x9b\x4d\x51\xfb\x47\x18\xbf\x45\x91\xef\xef\x83\x47\x9d\x54\x16\x35\xbd\x11\xe9\xab\x85\x02\xfe\xf5\xe6\xf5\x35\x09\x73\xbb\x2f\x0b\x05\x2b\xaa\x56\x12\xad\x1c\x0b\x29\xf0\xc2\xed\xea\x03\x96\xd6\xff\xf3\x85\x3c\x3a\x34\x31\xe1\x6c\x9a\x22\xfe\xa4\x14\x92\x15\xbc\x7d\xb7\xba\xb3\xc8\xf5\x3c\xac\x69\x2e\x69\x27\x4b\x90\xb9\x67\x5f\x1e\x9e\x48\x6e\x99\xa4\xc3\x76\x49\xef\x1a\x7a\x9d\x27\xfe\x4d\xcd\xfd\xf4\xb5\xf0\x27\xa7\x29\x03\xc5\x22\x2e\xee\x74\x60\xbe\x04\x93\x51\x67\x72\xb3\x23\xf0\xbe\xe0\xcd\x27\xc7\x33\x15\xb5\x66\x15\x6e\x02\x75\x6a\x0a\x81\x3c\xaa\x82\x8e\xee\x8c\x13\x6a\x86\x71\xf7\xe0\x3c\xfd\x94\xc3\xd3\x3d\x45\xd5\x75\x2c\x12\x77\x39\x4e\xa9\xf0\x7e\x0e\x9c\xe4\xba\x50\x6b\xe4\xe6\x69\x5c\x5a\x67\x6e\x44\x2e\xa1\xd8\x6e\x51\x55\x89\x27\xcc\xfb\x31\x35\xe8\xa0\x49\x9a\xfa\xb2\xf1\x2f\xd6\xa1\x03\xfe\x7d\xfb\x98\x2e\xc8\xea\xb6\x77\xc2\xdb\xe0\xaa\xcb\x6d\xc8\xea\x76\x64\x2d\x3b\x18\xde\xdd\x03\x17\xaf\x82\xf9\x17\xfc\xc5\x65\xc5\x6e\xe7\xc0\x3a\x1c\x04\x44\x75\xa1\xcd\x99\xea\xbe\x99\x1c\xba\x37\x91\xfb\xbe\xfd\x30\x1a\x68\x74\x81\xc8\x7c\x1e\x27\x26\xf5\xd5\xd4\xe7\x0b\x7f\x1a\x5f\x9f\xb6\xf5\xd9\xe9\xa7\xdb\x30\xd3\x7d\x49\x24\x06\x9e\xb9\x9c\x4e\x61\x92\x75\x87\xb5\xc1\xc5\x40\xd0\xf0\x23\x7b\x14\x27\x7e\x9c\xff\x85\x28\x7d\x75\x80\xe4\x1c\x9a\x41\x7c\xdc\xf3\x9e\x14\xfa\x4b\xd4\xd0\x08\x6f\x7c\x73\x9b\xba\xde\x78\x60\xc2\xd7\xdb\x40\x46\xb0\x15\x1f\xe6\x20\x7a\x23\xdc\xd1\xa1\xb3\x76\x26\xf4\xf7\x84\x71\x76\x13\xdb\x11\x6b\xbe\xc1\x1c\xb6\x87\x9a\x79\xf7\x62\x5a\xc2\x45\xf8\x76\x4a\x39\xf7\xfc\x10\xfd\xc0\x69\x15\x7e\x71\x61\xa2\xd5\x2e\xab\xa2\xc1\xcf\x29\x39\xc8\x79\xaf\xdc\x67\xe4\x30\xb3\x7d\x8e\x82\x11\x7d\x57\x3f\x0d\xff\xe3\x24\xc1\x71\xf8\xff\x1a\xfa\xff\xb7\x54\x38\x85\x7c\x80\x91\x79\xbe\x04\xe0\xe0\x76\xda\x8d\xc3\x1e\x3e\xf8\xac\x8b\xad\x19\xfe\xf8\xe6\xe9\x85\xaa\x5c\xf6\x07\x42\x83\x76\xd3\x56\xf0\x59\xda\x0d\x68\x2c\xdb\x3d\x6a\xaa\x78\x54\x66\xa7\x11\x54\x0b\xdb\x42\xc9\xd2\x80\x54\xd0\xb8\x86\x21\xd5\xda\x97\xfd\x20\x5c\xa2\xea\x07\xed\x3d\x78\x62\x0a\x6f\xdf\xf5\xbf\x91\x3d\xa4\x90\x88\xf0\x94\xe9\xc8\x87\x03\xb2\x42\x81\x1a\x48\x7d\x92\x76\xb7\x13\x8e\x9a\x33\x2e\x49\x5f\xc0\x7e\x14\x04\x92\x5f\x8e\x62\xf0\xf4\x26\x78\xe7\x8c\xf7\xa1\x10\xd5\x1c\xf6\x5c\x00\x22\x60\x4b\xd8\xb9\x5c\xa4\x8e\x1c\xc2\x59\x65\xc1\x81\xf9\x01\xba\x6e\x22\x4d\xc0\x75\xe4\xef\x85\x72\x38\x66\x27\x17\x0a\x37\x17\x1d\x70\xc4\xf8\x18\xb8\x8d\xbc\x19\x41\xe7\x60\x43\x3f\x8f\x8f\xa2\x36\x14\x9e\x02\x17\x26\xdd\x04\xba\xb0\xf1\xbd\xe0\x8d\x47\xfc\x04\x3e\xd9\xfd\xc2\xdd\xbd\xf7\x1f\x11\xc1\xe0\xd4\x11\x0c\x65\x37\xf2\xcf\xa1\x18\xbc\x99\xe0\xc8\xfd\x76\x8a\xa2\x23\x7f\x2f\x86\xc3\xf1\x3b\x41\xd0\xcd\x4c\x87\xdf\xab\x7e\x72\x3f\x0a\x7e\xce\x9d\x23\xe8\x39\x23\xce\x63\xe7\xbc\xe8\x91\x63\xf7\xba\x4b\xb4\x85\xe1\x35\x3a\x1d\xad\xc8\x2a\x1a\x14\x36\xfb\x55\xaa\x2a\x49\xe9\x4d\x17\xf6\x7f\xb3\x7c\x67\x89\xe8\xd9\x63\xb3\xcb\x1a\x9b\x64\xd4\x85\x6d\xfc\x10\xff\x2f\x00\x00\xff\xff\x3e\xcb\x3c\x91\xe9\x1b\x00\x00")

func schemaGoBytes() ([]byte, error) {
	return bindataRead(
		_schemaGo,
		"schema.go",
	)
}

func schemaGo() (*asset, error) {
	bytes, err := schemaGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.go", size: 7145, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/main.tmpl": templateMainTmpl,
	"schema.go":          schemaGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.go": &bintree{schemaGo, map[string]*bintree{}},
	"template": &bintree{nil, map[string]*bintree{
		"main.tmpl": &bintree{templateMainTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
